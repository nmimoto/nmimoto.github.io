###
###  ggplot2 with Diamonds data
###
###  ggplot grammer: 
###
###    ggplot(data, aes(  )) +          (required)
###      geom_    and/or   stat_  +     (one is required)
###        Facests                      (optional) 
###        Coordinate system            (optional)
###        Themes                       (optional)
###        annotation                   (optional)
###
###  See CheatSheet-ggplot2 for list of available functions
###########################################################################


###--- Dataset 
library(ggplot2)
ggplot2::diamonds

diamonds      # it is tibble (data.frame)
              #  53940 rows and 10 variables:

?diamonds     # shows description
#
#  price   : price in US dollars (\$326–\$18,823)
#  carat   : weight of the diamond (0.2–5.01)
#  cut     : quality of the cut (Fair, Good, Very Good, Premium, Ideal)
#  color   : diamond colour, from D (best) to J (worst)
#  clarity : a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best))
#  x       : length in mm (0–10.74)
#  y       : width  in mm (0–58.9)
#  z       : depth  in mm (0–31.8)
#  depth   : total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43–79)
#  table   : width of top of diamond relative to widest point (43–95)




###--------------------------------------------------------------------------
###---  Scatter Plot (geom_point)

# Plot carat vs price  
ggplot(diamonds, aes(x=carat, y=price)) + geom_point()

# Zoom in 
ggplot(diamonds, aes(x=carat, y=price)) +
                   geom_point() +
                   coord_cartesian(xlim=c(0,1), ylim=c(0,1500))

# Add CUT using color 
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + 
                   geom_point()

# Add smoothed line for each CUT
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + 
                   geom_point() +       # geom_point(shape=24, color="red", fill="green") 
                   stat_smooth()        # stat_smooth(method="lm", se=FALSE)   # lm, glm, gam, loess, rlm, etc. 

# Add CLARITY using shape
ggplot(diamonds, aes(x=carat, y=price, color=cut, shape=clarity)) + 
                   geom_point()

# Add DEPTH by using size, and set alpha (opacity)  
ggplot(diamonds, aes(x=carat, y=price, color=cut, shape=clarity, size=depth, alpha=.1)) + 
                   geom_point()




###---  Facetting (facet_grid and facet_wrap)

# Plot carat vs price facet by CUT (column)
ggplot(diamonds, aes(x=carat, y=price)) + 
                   geom_point() + 
                   facet_grid(.~cut)

# Plot carat vs price facet by CUT (row)
ggplot(diamonds, aes(x=carat, y=price)) + 
                   geom_point() + 
                   facet_grid(cut~.)

# Plot carat vs price facet by clarity (wrapped)
ggplot(diamonds, aes(x=carat, y=price)) + 
                   geom_point() + 
                   facet_wrap(~clarity)

# 2-way facet by CUT vs clarity 
ggplot(diamonds, aes(x=carat, y=price)) + 
                   geom_point() + 
                   facet_grid(cut~clarity)




###---  Cuting and Zooming 

# Cuts off data
ggplot(diamonds, aes(x=carat, y=price)) + 
                   geom_point() + 
                   xlim(c(3,5))    

# Uses all data, just zooms in (slower)
ggplot(diamonds, aes(x=carat, y=price)) + 
                   geom_point() + 
                   coord_cartesian(xlim=c(3,5))  




###--------------------------------------------------------------------------
###---  Box Plot (geom_boxplot)

ggplot(diamonds, aes(y=price)) + geom_boxplot()


# Use cut() to categorize by CARAT 
ggplot(diamonds, aes(x=cut(carat, breaks=12), y=price)) + geom_boxplot()
ggplot(diamonds, aes(x=cut(carat, breaks=c(0:6)), y=price)) + geom_boxplot()


# Separate and color by CUT
ggplot(diamonds, aes(x=cut(carat, breaks=c(0:6)), y=price, color=cut)) +
                      geom_boxplot()


ggplot(diamonds, aes(x=cut(carat, breaks=c(0:6)), y=price, fill=cut)) +
                      geom_boxplot()



d2931 <- diamonds[diamonds$carat>=.29 & diamonds$carat<.31, ]
ggplot(data=d2931, aes(x=cut, y=price)) + geom_boxplot()






###-----------------------------------
###  Bar Plot (geom_bar)
###

ggplot( data=d2931, aes(x=clarity, fill=cut)) + geom_bar()
ggplot( data=d2931, aes(x=clarity, fill=cut)) + geom_bar(position="fill")
ggplot( data=d2931, aes(x=clarity, fill=cut)) + geom_bar(position="dodge")





###-----------------------------------
###  Pie Chart (geom_bar + coord_polar)
###

ggplot(data=diamonds, aes(x=clarity, fill=clarity)) + geom_bar()
ggplot(data=diamonds, aes(x=clarity, fill=clarity)) + geom_bar() + coord_polar()

ggplot(data=diamonds, aes(x=factor(1), fill=clarity)) + 
  geom_bar(width=1) +
  coord_polar(theta="y")





###-----------------------------------
###  Histogram (geom_histogram)
###

ggplot( data=diamonds, aes(x=price)) + geom_histogram()
ggplot( data=diamonds, aes(x=price)) + geom_histogram(bins=10)
ggplot( data=diamonds, aes(x=price)) + geom_histogram(binwidth=100)


# color by CUT within each bar 
ggplot( data=diamonds, aes(x=price, fill=cut)) + geom_histogram()


# color by CUT side-by-side
ggplot( data=diamonds, aes(x=price, fill=cut)) + geom_histogram(position="dodge")


# color by CUT all bars 100%
ggplot( data=diamonds, aes(x=price, fill=cut)) + geom_histogram(position="fill")







str(mtcars)

library(ggplot2)
p <- ggplot(data=mtcars, aes(x=mpg))
p + geom_histogram()
p + geom_histogram(bins=6)

p + geom_density(col="blue", fill="red", alpha=.4, linetype="dotted", size=2)









<br><br> \hspace{10mm}

<!--------->
## 66.



p <- ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point()

p + facet_grid(.~cut)
p + facet_grid(cut~.)
p + facet_grid(cut~clarity)
p + facet_wrap(~cut)
p + facet_wrap(~clarity)




ggplot(diamonds, aes(x=log10(carat), y=log10(price))) + geom_point() 

ggplot(diamonds, aes(x=log(carat), y=log(price))) + geom_point() 

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() +
  coord_trans(x="log10", y="log10")

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() +
  coord_trans(x="log", y="log")

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() +
  coord_trans(x="sqrt", y="sqrt")


# Name       Trans         Inverse 
# "exp"      exp(x)        log(y)
# "log"      log(x)        exp(y)
# "log10"    log10(x)      10^y
# "log2"     log(x,2)      2^y
# "logit"    log(x/(1-x))  log(x/(1+e(y)))
# "pow10"    10^x          log10(y)
# "probit"   pnorm(x)      qnorm(y)
# "recip"    x^(-1)        y^(-1)
# "reverse"  -x            -y
# "sqrt"     x^(1/2)       y^2
# "asn"      atanh(x)      tanh(y)
