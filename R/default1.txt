####
###
###  Default Data (ISLR) - Logistic Regession
###
###
####################################################


###--- 1. Preliminary
library(ISLR)

data(Default)

names(Default)
#  "default" "student" "balance" "income"

dim(Default)
# 10000  4


library(tidyverse)
Default <- as_tibble(Default)
Default

summary(Default)

pairs(Default)

attach(Default)


cor(Default)    # gives error
Default


# Change class of default and student column
Default2 <- Default %>% mutate( default=as.numeric(default=="Yes"),
                      student=as.numeric(student=="Yes"))
Default2

cor(Default2)


# Back to Default data (not Default2)
plot(balance, default)
plot(default, balance, xlab="Default", ylab="Balance")

plot(income, default)
plot(default, income, xlab="Default", ylab="Income")

plot(student, default, ylab="Default", xlab="Student")
plot(default, student, xlab="Default", ylab="Student")


plot(balance, income, col=ifelse((default=="Yes"), "red", "blue"),
                      pch=ifelse((default=="Yes"), 4, 3))
lines(balance[default=="Yes"], income[default=="Yes"], col="red",
      pch=4, type="p")






###--- 2. Data Separation (Copied from Rtut-CV)

### --- Divide Dataset to Training and Testing and Set up k fold CV
Orig <- Default              # Entire Data set (have to be data.frame)
train.size <- 9000           # num of rows for training set
test.size <- 1000            # num of rows for testing set
resp.col.name <- "default"   # name of response column
num.folds <- 5               # k for k-fold CV
my.seed <- 8346              # give a seed


    #---
    set.seed(my.seed)
    ix = sample(1:nrow(Orig))
    Orig2 = Orig[ix, ]
    Train.set  = Orig2[1:train.size, ]
    Train.resp = Orig2[1:train.size, resp.col.name]
    Test.set   = Orig2[(train.size+1):(train.size+test.size), ]
    Test.resp  = Orig2[(train.size+1):(train.size+test.size), resp.col.name]

    # K-fold Cross Validation
    library(cvTools)     # install.packages("cvTools")
    set.seed(my.seed)
    folds = cvFolds(  nrow(Train.set),  K=num.folds  )  # k-fold CV (random assignment)

    CV.train      = list(Train.set[ folds$which!=1, ])
    CV.train.resp = list(Train.resp[folds$which!=1,1])
    CV.valid      = list(Train.set[ folds$which==1, ])
    CV.valid.resp = list(Train.resp[folds$which==1,1])

    for (k in 2:num.folds) {
      CV.train[[k]]      = Train.set[ folds$which!=k, ]
      CV.train.resp[[k]] = Train.resp[folds$which!=k,1]
      CV.valid[[k]]      = Train.set[ folds$which==k, ]
      CV.valid.resp[[k]] = Train.resp[folds$which==k,1]
    }

    # Output (all data.frame):
    #   Train.set
    #   Train.resp
    #   Test.set
    #   Test.resp
    #   CV.train[[k]]
    #   CV.train.resp[[k]]
    #   CV.valid[[k]]
    #   CV.valid.resp[[k]]




###--- 3 Logistic Regression on Training Set


###--- Model 0 Just balance
Fit00 <- glm(default ~ balance,  family=binomial, data=Train.set )
summary(Fit00)

plot(Train.set$balance, Train.set$default=="Yes", ylab="Default", xlab="Balance")
lines(Train.set$balance, Fit00$fitted, lwd=2, col="red", type="p")




###--- Model 1 All three
Fit01 <- glm(default ~ .,  family=binomial, data=Train.set )
summary(Fit01)

coef(Fit01)
summary(Fit01)$coef        # extract estimated parameters
summary(Fit01)$coef[,4]   # extract 4th column (P-value) of above










###--- Model 2 Remove income
Fit02 <- glm(default ~ balance + student,  family=binomial, data=Train.set )
summary(Fit02)

#- Extract fitted response (training)
Train.prob =predict(Fit02, type ="response")  # fitted responses
head(Train.prob)                             # see first few
                                             # Fit02$fitted  will do the same
                                             # fitted responses
#- Predict in Test Set
Test.prob = predict(Fit02, newdata=Test.set, type="response")



#- Pick a threshold
threshold = .9


    #- Check the training set accuracy
    library(caret)
    Train.pred = ifelse(Train.prob > threshold, "Yes", "No")  # Turn the fitted values to Up/Down using threshold of .5
    Test.pred  = ifelse(Test.prob  > threshold, "Yes", "No")
    CM.train <- confusionMatrix(factor(Train.pred), factor(as.matrix(Train.resp)), positive="Yes")
    CM.test  <- confusionMatrix(factor(Test.pred),  factor(as.matrix(Test.resp)), positive="Yes")

    CM.train            # Training set result
    CM.train$table      # output just the table

    CM.train[["byClass"]][["Sensitivity"]]
    CM.train[["byClass"]][["Specificity"]]

    CM.test             # Testing set
    CM.test$table      # output just the table

    # Test set result
    #           Reference
    # Prediction  No Yes
    #        No  957  25
    #        Yes   4  14

    colSums(CM.test$table) / sum(colSums(CM.test$table))    # % of Actual Yes/No
    rowSums(CM.test$table) / sum(rowSums(CM.test$table))    # % of predicted Yes/No


    ###--- Check ROC curve and AUC
    library(pROC)
    #- Training Set
    plot.roc(factor(as.matrix(Train.resp)),  Train.prob, levels=c("No", "Yes"))
      # point corresponding to CM.train
      abline(h=CM.train[["byClass"]][["Sensitivity"]], v=CM.train[["byClass"]][["Specificity"]], col="red")
      auc.train = auc(factor(as.matrix(Train.resp)), Train.prob, levels=c("No", "Yes"))
      text(.2, .2, paste("AUC=",round(auc.train, 3)))

    #- Test Set
    plot.roc(factor(as.matrix(Test.resp)),  Test.prob, levels=c("No", "Yes"))
      # point corresponding to CM.test
      abline(h=CM.test[["byClass"]][["Sensitivity"]], v=CM.test[["byClass"]][["Specificity"]], col="red")
      auc.test = auc(factor(as.matrix(Test.resp)), Test.prob, levels=c("No", "Yes"))
      text(.2, .2, paste("AUC=",round(auc.test, 3)))


###--- Plot the result for visualization
plot(Train.set$balance, Train.set$default=="Yes", ylab="Default", xlab="Balance")
lines(Train.set$balance, Fit02$fitted, lwd=2, col="red", type="p")







###--- Threshold Picker

#cost.list = c(1,1,1,1)/4           # order of (TP, TN, FP, FN)
cost.list = c(0,0,3,1)/4           # order of (TP, TN, FP, FN)
#cost.list = c(0,0,1,1)/2           # order of (TP, TN, FP, FN)
#cost.list = c(0,0,1,2)/3           # order of (TP, TN, FP, FN)
#cost.list = c(0,0,1,3)/4           # order of (TP, TN, FP, FN)




threshold.list = seq(0.01,.99,.01)    # grid for threshold
cost=0
library(caret)      # for confusionMatrix
for (i in 1:length(threshold.list)){

    threshold = threshold.list[i]

    #- Check the training set accuracy
    Test.pred  = ifelse(Test.prob  > threshold, "Yes", "No")
    CM.test  <- confusionMatrix(factor(Test.pred),
                                factor(as.matrix(Test.resp)),
                                positive="Yes")
    TP = CM.test$table[2,2]   # True  Pos
    TN = CM.test$table[1,1]   # True  Neg
    FP = CM.test$table[2,1]   # False Pos
    FN = CM.test$table[1,2]   # False Neg

    cost[i] = sum(c(TP, TN, FP, FN) * cost.list)
}
plot(threshold.list, cost, xlab="threshold")

cost.list
which.min(cost)
min(cost)
threshold.list[which.min(cost)]
