#-- To load this page --
#
#    source("https://nmimoto.github.io/R/ML-00.txt")
#
#  Above source() automatically installs function:
#    CreateCV(DF, numFolds, seed)
#


#-- Usage Example: 
#    source("https://nmimoto.github.io/R/ML-00.txt")   # load CreateCV()
#    CreateCV(Boston, numFolds=5, seed=5480)
#


CreateCV <- function(DF, numFolds, seed){
"K-fold Cross Validation.
response variable must be called 'resp'.
Creates training and testing data as global variables. "


    # break out if 'resp' column doesn't exist
    if (!("resp" %in% colnames(DF))) {
      cat("\n  'resp' column must exist in DF  \n")
      break
    }


    fold.size = floor(nrow(DF)/(numFolds+1))
    train.size = fold.size*numFolds
    test.size = nrow(DF)-train.size

    cat("\n    number of folds: ", numFolds,
        "\n    number of obs: ",   nrow(DF),
        "\n    training data: ", fold.size , " x ", numFolds, " = ", train.size,
        "\n    size of test data: ", test.size, "\n")

#    cat("\n    number of folds: ", numFolds,
#        "\n    number of obs: ", nrow(DF),
#        "\n    size of training data: ", train.size,
#        "\n    size of test data: ", test.size,
#        "\n    size of each fold : ", fold.size, "\n")


    set.seed(seed)
    ix = sample(1:nrow(DF))                # random suffle of row index.
    fold_ix = c(rep(1:(numFolds), length.out=train.size), rep(0, test.size))
# fold_ix = rep(1:(numFolds+1), length.out=nrow(DF))   # sequence of 1-6
    # cbind(ix, fold_ix)

    # Assign 1-6 back to the original row numbers
    CVfold = matrix(0, nrow(DF))
    for (fold in 1:numFolds){
        CVfold[ix[(fold_ix==fold)]] = fold
    }
    # CVfold   # fold_ix=0 comes out as CVfold=0

    Train.set  = DF[CVfold!=0, ]
    Train.resp = DF[CVfold!=0, "resp"]
    Test.set   = DF[CVfold==0, ]
    Test.resp  = DF[CVfold==0, "resp"]

    CV.train      = list(DF[CVfold>0 & CVfold!=1,  ])
    CV.train.resp = list(DF[CVfold>0 & CVfold!=1,  "resp"])
    CV.valid      = list(DF[CVfold>0 & CVfold==1,  ])
    CV.valid.resp = list(DF[CVfold>0 & CVfold==1,  "resp"])

    for (k in 2:numFolds) {
      CV.train[[k]]      = DF[CVfold>0 & CVfold!=k,  ]
      CV.train.resp[[k]] = DF[CVfold>0 & CVfold!=k,  "resp"]
      CV.valid[[k]]      = DF[CVfold>0 & CVfold==k,  ]
      CV.valid.resp[[k]] = DF[CVfold>0 & CVfold==k,  "resp"]
    }


    #Output (all data.frame):
    Train.set      <<-  Train.set
    Train.resp     <<-  Train.resp
    Test.set       <<-  Test.set
    Test.resp      <<-  Test.resp
    CV.train       <<-  CV.train
    CV.train.resp  <<-  CV.train.resp
    CV.valid       <<-  CV.valid
    CV.valid.resp  <<-  CV.valid.resp


    cat("\n    Global variables created: ",
    "\n      Train.set       Train.resp          ",
    "\n      Test.set        Test.resp           ",
    "\n      CV.train[[k]]   CV.train.resp[[k]]  ",
    "\n      CV.valid[[k]]   CV.valid.resp[[k]]  \n\n")

}
