###
###
### Boston Data (MASS) - Newral Network (Regression)
###
###
#################################




###---------------------------------------------------
###--- 0. Preliminary
library(MASS)      # install.packages("MASS")
data(Boston)

library(tidyverse)   # install.packages(tidyverse")
Boston <- as_tibble(Boston)
Boston

#  ?Boston  # see explanation for variables
##--- Scale data for Neural Networks
Boston2 <- Boston %>% mutate(resp=medv)  # rename "medv" as "resp"
Scaled  <- scale(Boston2)      # comes with extra attributes
Boston2 <- as_tibble(Scaled) 
Boston2

# Means and SDs for each column. To be used in un-scalling.
Means <- attr(Scaled, "scaled:center")
SDs   <- attr(Scaled, "scaled:scale")

## Response varialbe needs to be named "resp".
## All columns including resp needs to be numeric.

###--- 0b. Divide Dataset to Training and Testing and Set up k fold CV
Orig <- Boston2               # Entire Data set (have to be data.frame)
train.size <- 400            # num of rows for training set
test.size <- 96              # num of rows for testing set
resp.col.name <- "resp"      # name of response column
num.folds <- 5               # k for k-fold CV
my.seed <- 3231              # give a seed

    #---
    set.seed(my.seed)
    ix = sample(1:nrow(Orig))
    Orig2 = Orig[ix, ]
    Train.set  = Orig2[1:train.size, ]
    Train.resp = Orig2[1:train.size, resp.col.name]
    Test.set   = Orig2[(train.size+1):(train.size+test.size), ]
    Test.resp  = Orig2[(train.size+1):(train.size+test.size), resp.col.name]

    # K-fold Cross Validation
    library(cvTools)     # install.packages("cvTools")
    set.seed(my.seed)
    folds = cvFolds(  nrow(Train.set),  K=num.folds  )  # k-fold CV (random assignment)

    CV.train      = list(Train.set[ folds$which!=1, ])
    CV.train.resp = list(Train.resp[folds$which!=1,1])
    CV.valid      = list(Train.set[ folds$which==1, ])
    CV.valid.resp = list(Train.resp[folds$which==1,1])

    for (k in 2:num.folds) {
      CV.train[[k]]      = Train.set[ folds$which!=k, ]
      CV.train.resp[[k]] = Train.resp[folds$which!=k,1]
      CV.valid[[k]]      = Train.set[ folds$which==k, ]
      CV.valid.resp[[k]] = Train.resp[folds$which==k,1]
    }
# Output (all data.frame):
#   Train.set      /  Train.resp
#   Test.set       /  Test.resp
#   CV.train[[k]]  /  CV.train.resp[[k]]
#   CV.valid[[k]]  /  CV.valid.resp[[k]]





###-------------------------------------------------
###--- 1. Newral Network
library(neuralnet)
sigmoid <- function(x) 1 / (1 + exp(-x))

Fit01 = neuralnet::neuralnet(resp ~., Train.set,
                             hidden=10,
                             learningrate=1e-2,
                             act.fct=sigmoid,
                             linear.output=TRUE)

# FALSE means activation function is applied to output node

# plot(Fit01)  # Use only if NN is small enough (hidden <10)

Chosen.model <- Fit01

    #--- Check the training fit
    Train.fitted = predict(Chosen.model, Train.set, type="vector")

    plot(Train.fitted, as.matrix(Train.resp), xlab="Fitted", ylab="Actual")
    abline(0,1, col="red")

    Train.RSS <- data.frame(
      RMSE = caret::RMSE(Train.fitted, as.matrix(Train.resp)),
      Rsquare = caret::R2(Train.fitted, Train.resp)
    )
    Train.RSS

    #--- Check the training fit
    Test.fitted = predict(Chosen.model, Test.set, type="vector")

    plot(Test.fitted, as.matrix(Test.resp), xlab="Fitted", ylab="Actual")
    abline(0,1, col="red")

    Test.RSS <- data.frame(
      RMSE = caret::RMSE(Train.fitted, as.matrix(Train.resp)),
      Rsquare = caret::R2(Train.fitted, Train.resp)
    )
    Train.RSS
    Test.RSS

# Train.RSS
#            RMSE   Rsquare
# resp 0.01134674 0.9998762
# Test.RSS
#            RMSE   Rsquare
# resp 0.01134674 0.9998762

    
    
#--- UNscale the response back (Rsquare does not change)
Train.unscaled <- Means["resp"] + Train.fitted * SDs["resp"]
Test.unscaled  <- Means["resp"] + Test.fitted * SDs["resp"]

    plot(Test.unscaled, as.matrix(Test.resp), xlab="Fitted", ylab="Actual")
    abline(0,1, col="red")

    Test.RSS <- data.frame(
      RMSE = caret::RMSE(Train.unscaled, as.matrix(Train.resp)),
      Rsquare = caret::R2(Train.unscaled, Train.resp)
    )
    Train.RSS
    Test.RSS


    
    
        
    
