###
###
### Boston Data (MASS) - Decision Tree (Regression)
###                        with Bagging, Raondom Forest and Boosting
###                        with 5-fold Cross Validation
###   ver 0.0.3
###
#################################


###-------------------------------------------------
###--- 0. Preliminary

# Using Boston3 from https://nmimoto.github.io/R/boston0.txt
library(MASS)                # install.packages("MASS")
library(tidyverse)           # install.packages("tidyverse")
Boston <- as_tibble(Boston)
Boston

# Rename "medv" column as "resp" to streamline analysis.
Boston2 <- Boston %>% rename(resp=medv)
Boston2

# move "resp" columnm to 1st
Boston2 <- Boston2 %>% relocate(resp)
Boston2

# turn "chas" column into 0/1 factor
Boston3 <- Boston2 %>% mutate( chas=as.factor(chas) )
Boston3

# Importance List by Chisq test

  # top list:
  # 3  4  6 10
  # "zn" "indus" "nox"   "rad"

  # bottom list
  # c(7, 8, 9, 13)
  # "rm"    "age"   "dis"   "black"

  #1  resp    (dbl)   <- used to be "medv". Response variable (Y).
  #2  crim    (dbl)
  #3  zn      (dbl)
  #4  indus   (dbl)
  #5  chas    (factor)
  #6  nox     (dbl)
  #7  rm      (dbl)
  #8  age     (dbl)
  #9  dis     (dbl)
  #10 rad     (dbl)
  #11 tax     (dbl)
  #12 ptratio (dbl)
  #13 black   (dbl)
  #14 lstat   (dbl)




###-------------------------------------------------
###--- 2. Data Separation (Copied from Rtut-CV)
### Divide Dataset to Training and Testing and Set up k fold CV
Orig <- Boston3              # Entire Data set (have to be data.frame)
train.size <- 400            # num of rows for training set
test.size <- 106              # num of rows for testing set
resp.col.name <- "resp"      # name of response column
num.folds <- 5               # k for k-fold CV
my.seed <- 3231              # give a seed

    #---
    set.seed(my.seed)
    ix = sample(1:nrow(Orig))
    Orig2 = Orig[ix, ]
    Train.set  = Orig2[1:train.size, ]
    Train.resp = Orig2[1:train.size, resp.col.name]
    Test.set   = Orig2[(train.size+1):(train.size+test.size), ]
    Test.resp  = Orig2[(train.size+1):(train.size+test.size), resp.col.name]

    # K-fold Cross Validation
    library(cvTools)     # install.packages("cvTools")
    set.seed(my.seed)
    folds = cvFolds(  nrow(Train.set),  K=num.folds  )  # k-fold CV (random assignment)

    CV.train      = list(Train.set[ folds$which!=1, ])
    CV.train.resp = list(Train.resp[folds$which!=1,1])
    CV.valid      = list(Train.set[ folds$which==1, ])
    CV.valid.resp = list(Train.resp[folds$which==1,1])

    for (k in 2:num.folds) {
      CV.train[[k]]      = Train.set[ folds$which!=k, ]
      CV.train.resp[[k]] = Train.resp[folds$which!=k,1]
      CV.valid[[k]]      = Train.set[ folds$which==k, ]
      CV.valid.resp[[k]] = Train.resp[folds$which==k,1]
    }
# Output (all data.frame):
#   Train.set      /  Train.resp
#   Test.set       /  Test.resp
#   CV.train[[k]]  /  CV.train.resp[[k]]
#   CV.valid[[k]]  /  CV.valid.resp[[k]]


#--- plot Training and Test for visualization
fold = 2
plot(CV.train[[fold]]$lstat,  CV.train[[fold]]$resp, xlab="lstat", ylab="Response (medv)")
lines(CV.valid[[fold]]$lstat, CV.valid[[fold]]$resp, type="p", col="red",pch=19)







###-------------------------------------------------
###--- 3. Decision Tree has high variance

#---------
library(tree)          # install.packages("tree")
tree31 <- tree(resp ~., CV.train[[1]])
summary(tree31)

plot(tree31)
text(tree31, pretty=1, cex=.7)


#---------
tree32 <- tree(resp ~., CV.train[[2]])
summary(tree32)

plot(tree32)
text(tree32, pretty=0, cex=.7)







###-------------------------------------------------
###--- 4. Decision Tree Growing using rpart().  It has color plotting.
library(rpart)         # install.packages("rpart")
library(rpart.plot)    # install.packages("rpart.plot")
tree00<- rpart(resp~., data=Train.set)
summary(tree00)

rpart.plot(tree00)     # now you can plot in color

plot(tree00)           # old way of plotting
text(tree00)





###-------------------------------------------------
###--- 5. Decision Tree (Grow and Prune using tree())

#--- Growing the tree
library(tree)          # install.packages("tree")
tree1 = tree(resp~., Train.set)
summary(tree1)
tree1

plot(tree1)
text(tree1, pretty=0, cex=1)

#--- Check the training fit
Train.fitted = predict(tree1, type="vector")
Train.fitted

plot(Train.fitted, as.matrix(Train.resp), xlab="Fitted", ylab="Actual")
abline(0,1, col="red")

library(caret)          # install.packages("caret")
Train.RSS <- data.frame(
  RMSE = caret::RMSE(Train.fitted, as.matrix(Train.resp)),
  Rsquare = caret::R2(Train.fitted, Train.resp)
)
Train.RSS

#         RMSE   Rsquare
#resp 3.777721 0.8377335


#--- Predict the response, calculate test RMSE
Test.pred = predict(tree1, Test.set, type="vector")
Test.pred

plot(Test.pred, as.matrix(Test.resp), xlab="Predicted", ylab="Actual")
abline(0,1, col="red")

Test.RSS <- data.frame(
  RMSE = caret::RMSE(Test.pred, as.matrix(Test.resp)),
  Rsquare = caret::R2(Test.pred, Test.resp)
)
Test.RSS
#         RMSE   Rsquare
#resp 4.605124 0.6852545

#      RMSE   Rsquare
#1 4.946511 0.6353647


#--- Pruning the tree
set.seed(my.seed)
cv.for.pruning = cv.tree(tree1, FUN=prune.tree, K=5)   #5-fold CV
     #use FUN= prune.misclass if you are doing classification tree
names(cv.for.pruning)

plot(cv.for.pruning$size, cv.for.pruning$dev, type="b")
plot(cv.for.pruning$k,    cv.for.pruning$dev, type="b")
                                        # size is the number of terminal nodes
                                        # dev is the Av. CV error rate
                                        # k is the pruning parameter (alpha)
cv.for.pruning


# We conclude that it's better to not purne.  If you want to prune, use below.
prune1 = prune.tree(tree1, best=6)  # specify 8-node tree
plot(prune1)
text(prune1, pretty=0, cex=1)



#--- Predict the response, calculate test RMSE
Test.pred=predict(prune1, Test.set, type="vector")

plot(Test.pred, as.matrix(Test.resp), xlab="Predicted", ylab="Actual")
abline(0,1, col="red")

Test.RSS <- data.frame(
  RMSE = caret::RMSE(Test.pred, as.matrix(Test.resp)),
  Rsquare = caret::R2(Test.pred, Test.resp)
)
Test.RSS








###-------------------------------------------------
###--- 6. Bagging
library(randomForest)
set.seed(my.seed)
treeRF01 = randomForest(resp~., data=Train.set, mtry=13, ntree=500, importance=TRUE)
treeRF01

Test.pred = predict(treeRF01, newdata=Test.set)

importance (treeRF01)
varImpPlot (treeRF01)

plot(Test.pred, as.matrix(Test.resp), xlab="Predicted", ylab="Actual")
abline(0,1, col="red")

Test.RSS <- data.frame(
  RMSE = caret::RMSE(Test.pred, as.matrix(Test.resp)),
  Rsquare = caret::R2(Test.pred, Test.resp)
)
Test.RSS


###--- change ntree to 25
library(randomForest)
set.seed(my.seed)
treeRF02 = randomForest(resp~., data=Train.set, mtry=13, ntree=25, importance=TRUE)
treeRF02

Test.pred = predict(treeRF02, newdata=Test.set)

importance (treeRF02)
varImpPlot (treeRF02)

plot(Test.pred, as.matrix(Test.resp), xlab="Predicted", ylab="Actual")
abline(0,1, col="red")

library(caret)          # install.packages("caret")
Test.RSS <- data.frame(
  RMSE = caret::RMSE(Test.pred, as.matrix(Test.resp)),
  Rsquare = caret::R2(Test.pred, Test.resp)
)
Test.RSS






###-------------------------------------------------
###--- 7. Radnom Forest

###--- change mtry to 6
library(randomForest)
set.seed(my.seed)
treeRF03 = randomForest(resp~., data=Train.set, mtry=6, ntree=500, importance=TRUE)
treeRF03

Test.pred = predict(treeRF03, newdata=Test.set)

importance (treeRF03)
varImpPlot (treeRF03)

plot(Test.pred, as.matrix(Test.resp), xlab="Predicted", ylab="Actual")
abline(0,1, col="red")

library(caret)          # install.packages("caret")
Test.RSS <- data.frame(
  RMSE = caret::RMSE(Test.pred, as.matrix(Test.resp)),
  Rsquare = caret::R2(Test.pred, Test.resp)
)
Test.RSS







###-------------------------------------------------
###--- 8. Boosting
set.seed(my.seed)
treeBT01 = gbm::gbm(resp~., data=Train.set, distribution="gaussian", n.trees=5000,
             interaction.depth=4)
summary(treeBT01)

Test.pred=predict(treeBT01, newdata=Test.set, n.trees=5000)

plot(treeBT01, i="rm")
plot(treeBT01, i="lstat")

plot(Test.pred, as.matrix(Test.resp), xlab="Predicted", ylab="Actual")
abline(0,1, col="red")

library(caret)          # install.packages("caret")
Test.RSS <- data.frame(
  RMSE = caret::RMSE(Test.pred, as.matrix(Test.resp)),
  Rsquare = caret::R2(Test.pred, Test.resp)
)
Test.RSS






###-------------------------------------------------
###--- 9. OLS for comparison
Reg01 = lm(resp~., data=Train.set)
summary(Reg01)

Test.pred=predict(Reg01, newdata=Test.set)

plot(Test.pred, as.matrix(Test.resp), xlab="Predicted", ylab="Actual")
abline(0,1, col="red")

library(caret)          # install.packages("caret")
Test.RSS <- data.frame(
  RMSE = caret::RMSE(Test.pred, as.matrix(Test.resp)),
  Rsquare = caret::R2(Test.pred, Test.resp)
)
Test.RSS
#         RMSE   Rsquare
#resp 3.862942 0.7645155
