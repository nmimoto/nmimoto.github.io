###
###
###  ARMA(p,q) model - R code only
###
###
####################################



# 1. ARMA(p,q) Model 

## Theoretical ACF and ACVF of ARMA

  phis   <- c(.4, .2)
  thetas <- c(.6, .2)

  # sign is like [Brockwell]:  (1-phi B) X_t = (1+theta B) e_t   
  Th.acf  <- ARMAacf(ar=phis, ma=thetas, lag.max=20)           # Theoretical ACF
  Th.pacf <- ARMAacf(ar=phis, ma=thetas, lag.max=20, pacf=T)   # Theoretical PACF


  #--- Basic Simulation with ARMA(p,q) ---
  mu <- 5
  x  <- arima.sim(n = 250, list(ar =phis,   ma = thetas )) + mu   # Simulate ARMA(2,2)

  plot(x, type="o"); 

  layout(matrix(1:2, 1, 2)) 
  acf(x);   lines(0:20, Th.acf,  type='p', col="red")      # sample ACF;  Theo ACF
  pacf(x);  lines(1:20, Th.pacf, type='p', col="red")      # sample PACF; Theo PACF 
  layout(1)

 

# 3. Order Selection of ARMA(p,q) model

## Simulation Study: Is AICc better? 

  library(forecast)   #if not installed, do:  install.packages("forecast")

  # initialize the object that saves result
  Result1 <- Result2 <- Result3 <- matrix(0, 1000, 7)
  Result4 <- Result5 <- Result6 <- matrix(0, 1000, 7)
  for (i in 1:1000){
    Y <- arima.sim(list(ar = c(.6, -.6), ma=c(.8) ), 100 ) + 10     # case 1
    #Y <- arima.sim(list(ar = c(.6,  .3), ma=c(.5) ), 100 ) + 10      # case 2
  
    #- picks model based on AICC, AIC, and BIC
    Fit1 <- auto.arima(Y, max.order=6, max.d=0, max.D=0,  ic=c("aicc"))
    Fit2 <- auto.arima(Y, max.order=6, max.d=0, max.D=0,  ic=c("aic"))
    Fit3 <- auto.arima(Y, max.order=6, max.d=0, max.D=0,  ic=c("bic"))

    #- all combo method (takes time) 
    Fit4 <- auto.arima(Y, max.order=6, max.d=0, max.D=0,  ic=c("aicc"), stepwise=FALSE)
    
    print(i)   #- print order on screen (optional)
  
    Result1[i,] <- Fit1$arma   # checks if it picked ARMA(2,1) with mean
    Result2[i,] <- Fit2$arma
    Result3[i,] <- Fit3$arma
    Result4[i,] <- Fit4$arma         
  }

  R1 <- apply( Result1, 1, function(x){ setequal(x, c(2,1,0,0,1,0,0)) } )
  R2 <- apply( Result2, 1, function(x){ setequal(x, c(2,1,0,0,1,0,0)) } )
  R3 <- apply( Result3, 1, function(x){ setequal(x, c(2,1,0,0,1,0,0)) } )
  R4 <- apply( Result4, 1, function(x){ setequal(x, c(2,1,0,0,1,0,0)) } )
  c(mean(R1),  mean(R2),  mean(R3), mean(R4))

  # Results
  # AICc   AIC    BIC    AICc w All
  # 0.867  0.835  0.943  0.716        for Case 1  ar=(.6, -.6) ma=c(.8) mu=10 
  # 0.352  0.374  0.172  0.293        for Case 2  ar=(.6,  .5) ma=c(.8) mu=10 
  

 

# 3. Example: Annual Copper Price

  library(forecast)     # load forecast package

  D  <- read.csv("https://nmimoto.github.io/datasets/copper.csv")
  D1 <- ts(D[,2], start=c(1800,1), freq=1)
  plot(D1, type='o')


  layout(matrix(1:2, 1, 2))
  acf(D1)
  pacf(D1)
  layout(1)

  
  Fit01 <- auto.arima(D1, d=0  )       # search for best ARMA(p,q) using AICc (default)
  Fit01


  #- Search for best ARMA(p,q) using stepwise method (default)
  Fit02 <- auto.arima(D1, trace=TRUE, d=0  )   
  Fit02


  #- Search for best ARMA(p,q) using all combo method 
  Fit03 <- auto.arima(D1, max.order=5, stepwise=FALSE, trace=TRUE, d=0  )
  Fit03


  Arima(D1, order=c(2, 0, 1))


  source('https://nmimoto.github.io/R/TS-00.txt')    # load Randomness.tests()
  Randomness.tests(Fit01$resid)
  Randomness.tests(Fit03$resid)


### Fitting copper data with AR only and MA only 

  Fit2 <- Arima(D1, order=c(3,0,0))   # Force to fit AR(3):  order=c(p, d, q)
  Fit2

  Fit3 <- Arima(D1, order=c(0,0,3))   # Force to fit MA(q): order=c(p, d, q)
  Fit3

























