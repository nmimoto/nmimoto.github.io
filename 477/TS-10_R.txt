######################################
#
#
#   10. GARCH model 
#
#
######################################


library(fGarch)



#-- Load Randomness.tests() and Stationarity.tests() from web site --

  source("http://gozips.uakron.edu/~nmimoto/689/TS_R-90.txt")




#--- 1. GARCH example -----------------------------------------

  library(quantmod)

  getSymbols("AAPL") #- download from Yahoo!

  X <- as.ts(AAPL$AAPL.Adjusted[200:600])
  
  plot(X, type="o")
  
  plot(diff(X), type="o")
  
  Randomness.tests(diff(log(X)))








#--- 2. Example of Heteroscedasticity (Not GARCH) ------------------------------------

  D <- read.csv("http://gozips.uakron.edu/~nmimoto/pages/datasets/Gas.csv")
  D1 <- ts(D[,2], start=c(1956, 1), freq=12)
  plot(D1, type=’o’)








#--- 3. Fitting SP 500 with GARCH(1,1) ---------------------------------------


  D <- read.csv("http://gozips.uakron.edu/~nmimoto/pages/datasets/SPY.csv", header=T)
  head(D)
  X <- ts(D[,8], start=1)
  plot(X)

  dX <- diff(log(X))
  plot(dX)

  acf(dX)
  acf(dX^2)



  library(fGarch)

  Fit1 <-  garchFit(~ garch(1,1), data=dX, cond.dist="norm",  include.mean = FALSE, trace = FALSE)



  Fit1@fit$par      #-- estimated parameters

  Fit1@residuals    #-- this is not the garch residuals!!!!

  dX/Fit1@sigma.t   #-- this is the residuals

  print(Fit1@fit$ics)       #-- AIC and BIC are here


  layout(matrix(1:2, 2, 1, byrow=T))
  plot(dX)
  plot(Fit1@sigma.t, type="l")   #- estimated Sigma_t
  layout(1)


  plot(dX)
  lines(Fit1@sigma.t, type="l", col="red")


  source("http://gozips.uakron.edu/~nmimoto/689/TS_R-90.txt") #- load Randomness.tests

  res1  <- dX/Fit1@sigma.t   #-- this is the residuals
  Randomness.tests(res1)





#--- 4. Built-in distributions --------------------------------------

  x <- seq(-10,10, .1)

  #- Standardized t-distribution 
  plot(x, dstd(x, mean = 0, sd = 1, nu = 5), type="l" )


  #- Generalized Error Distribution
  plot(x, dged(x, mean = 0, sd = 1, nu = 2), type="l" )

  #- Skewed-Standardized t-distribution 
  plot( x, dsstd(x, mean = 0, sd = 1, nu = 5, xi = 1.5), type="l" )
  lines(x, dstd(x, mean = 0, sd = 1, nu = 5), col="red" )

  #- Skewed-Generalized Error Distribution
  plot(x, dsged(x, mean = 0, sd = 1, nu = 5, xi = 1.5) , type="l" )
  lines(x, dged(x, mean = 0, sd = 1, nu = 2), type="l" )








#--- 5. Simulation and estimation of GARCH -------------------------------------------------

  n     <- 1000
  theta <- c(.024, .1, .8)   #- Parametes of GARCH(1,1)


  #- Specify parameters and conditional distribuiton (distribution of e_t)
  spec <- garchSpec(model = list(omega=theta[1], alpha=theta[2], beta=theta[3]),  cond.dist="norm")

  #- Simulate GARCH using above spec
  x    <- garchSim(spec, n = n, extended=FALSE)


  #- Estimate parameters of GARCH 
  Fit1 <-  garchFit(~ garch(1,1), data=x, cond.dist="norm",  include.mean = FALSE, trace = FALSE)

  coef(Fit1) #- estimated parameters
  
  



  #--- Monte Carlo Estimation to see parameter MSE --
  n     <- 1000
  theta <- c(.1, .1, .8)   #- Parametes of GARCH(1,1)


  #- Specify parameters and conditional distribuiton (distribution of e_t)
  spec <- garchSpec(model = list(omega=theta[1], alpha=theta[2], beta=theta[3]),  cond.dist="norm")


  Param <- matrix(0, 1000, 3)
  for (i in 1:1000) {

    print(i)

    Y    <- arima.sim(

    x    <- garchSim(spec, n = n, extended=FALSE)
    Fit1 <- garchFit(~ garch(1,1), data=x, cond.dist="norm",  include.mean = FALSE, trace = FALSE)

    Param[i,] <- coef(Fit1) #- estimated parameters

  }
  
  SE <- (Param - t( matrix(theta, 3, 1000) ))^2
  MSE <- apply(SE, 2, mean) #- MSE of each parameter
  rMSE <- sqrt(MSE);  rMSE










#--- 6. Simulation showing how error distribution affect parameter estimation in GARCH(1,1) ---------------------------------------------------

  n   <- 1000
  itt <- 1000
  theta <- c(.024, .1, .8)
  
  
  Param11 <- matrix(rep(0,3*itt), itt, 3)
  for (i in 1:itt) {
  
    spec <- garchSpec(model = list(omega=theta[1], alpha=theta[2], beta=theta[3]),  cond.dist="norm")
    x    <- garchSim(spec, n = n, extended=FALSE)
  
    est2 <-  garchFit(~ garch(1,1), data=x, cond.dist="norm",  include.mean = FALSE, trace = FALSE)
    Param11[i,] <- coef(est2)
  
  }
  
  
  
  Param12 <- matrix(rep(0,3*itt), itt, 3)
  for (i in 1:itt) {
  
    spec <- garchSpec(model = list(shape=5, omega=theta[1], alpha=theta[2], beta=theta[3]),  cond.dist="std")
    x     <- garchSim(spec, n = n, extended=FALSE)
  
    est2 <-  garchFit(~ garch(1,1), data=x, cond.dist="norm",  include.mean = FALSE, trace = FALSE)
    Param12[i,] <- coef(est2)
  
  }
  
  
  
  Param13 <- matrix(rep(0,3*itt), itt, 3)
  for (i in 1:itt) {
  
    spec <- garchSpec(model = list(skew=.9,  shape=1.45, omega=theta[1], alpha=theta[2], beta=theta[3]),  cond.dist="sged")
    x    <- garchSim(spec, n = n, extended=FALSE)
  
    est2 <-  garchFit(~ garch(1,1), data=x, cond.dist="norm",  include.mean = FALSE, trace = FALSE)
    Param13[i,] <- coef(est2)
  
  }
  
  
  layout(matrix(1:9, 3, 3, byrow=T))
  hist(Param11[,1], 10, xlim=c(0,.5)); hist(Param11[,2], 10, xlim=c(0,.5)); hist(Param11[,3], xlim=c(0.4,1), breaks=10)
  hist(Param12[,1], 10, xlim=c(0,.5)); hist(Param12[,2], 10, xlim=c(0,.5)); hist(Param12[,3], xlim=c(0.4,1), breaks=10)
  hist(Param13[,1], 10, xlim=c(0,.5)); hist(Param13[,2], 10, xlim=c(0,.5)); hist(Param13[,3], xlim=c(0.4,1), breaks=10)
  
  
  P11 <- (Param11 - t(matrix(theta, 3, itt) ))^2
  P12 <- (Param12 - t(matrix(theta, 3, itt) ))^2
  P13 <- (Param13 - t(matrix(theta, 3, itt) ))^2
  
  apply(P11, 2, mean)
  apply(P12, 2, mean)
  apply(P13, 2, mean)
  
  apply(P11, 2, mean)/apply(P11, 2, mean)
  apply(P12, 2, mean)/apply(P11, 2, mean)
  apply(P13, 2, mean)/apply(P11, 2, mean)













#--- 7. Fitting SP 500 with ARMA-GARCH(1,1) ---------------------------------------------------------

  library(fGarch)
  library(forecast)
  source("http://gozips.uakron.edu/~nmimoto/689/TS_R-90.txt") #- load Randomness.tests
  

  D <- read.csv("http://gozips.uakron.edu/~nmimoto/pages/datasets/SPY.csv", header=T)
  head(D)
  X <- ts(D[,8], start=1)
  plot(X)

  dX <- diff(log(X))
  plot(dX)

  Fit1 <- auto.arima(dX)
  Fit1

  Fit2 <- Arima(dX, order=c(2,0,0), include.mean=FALSE)
  Fit2

  Randomness.tests(Fit2$residuals)



  #--- Cut dX into period 1
  dX1 <- window(dX, start=1000, end=2000)

  Fit3 <- auto.arima(dX1);  Fit3
  Randomness.tests(Fit3$residuals)



  #--- Cut dX into period 2
  dX2 <- window(dX, start=2000, end=3000)

  Fit4 <- auto.arima(dX2);   Fit4
  Randomness.tests(Fit4$residuals)


  #- If you force same MA(1) model as in period 1 - 
  Fit5 <- Arima(dX2, order=c(1,0,0), include.mean=FALSE );   Fit5   
  Randomness.tests(Fit5$residuals)


  #--- Fit GARCH to residuals from ARMA models --- 
  Fit3G <-  garchFit(~ garch(1,1), data=Fit3$residuals, cond.dist="norm",  include.mean = FALSE, trace = FALSE)
  Fit3G

  Fit4G <-  garchFit(~ garch(1,1), data=Fit4$residuals, cond.dist="norm",  include.mean = FALSE, trace = FALSE)
  Fit4G


  res3G <- Fit3$residuals/Fit3G@sigma.t;   Randomness.tests(res3G)

  res4G <- Fit4$residuals/Fit4G@sigma.t;   Randomness.tests(res4G)




  #--- Do ARMA and GARCH fitting at the same time
  Fit4Gb <-  garchFit(~ arma(0,2) + garch(1,1), data=dX2, cond.dist="norm",  include.mean = FALSE, trace = FALSE)
  Fit4Gb

  Randomness.tests(Fit4Gb@residuals/Fit4Gb@sigma.t)


  Fit4Gc <-  garchFit(~ arma(0,2) + garch(1,1), data=dX2, cond.dist="sstd",  include.mean = FALSE, trace = FALSE)
  Fit4Gc

  Randomness.tests(Fit4Gc@residuals/Fit4Gc@sigma.t)













#--- 8. Prediction of SP 500 with ARMA-GARCH(1,1) -------------------------------------------------


  library(fGarch)
  source("http://gozips.uakron.edu/~nmimoto/689/TS_R-90.txt") #- load Randomness.tests
  

  D <- read.csv("http://gozips.uakron.edu/~nmimoto/pages/datasets/SPY.csv", header=T)
  head(D)
  X <- ts(D[,8], start=1)
  plot(X)

  dX <- diff(log(X))
  plot(dX)


  #--- Cut dX into period 2
  dX2 <- window(dX, start=2000, end=3000)


  #--- Fit ARMA and GARCH at the same time
  Fit4Gb <-  garchFit(~ arma(0,2) + garch(1,1), data=dX2, cond.dist="norm",  include.mean = FALSE, trace = FALSE)
  Fit4Gb
                                                
  res4Gb <- Fit4Gb@residuals / Fit4Gb@sigma.t   #- residuals after ARMA-GARCH
                                                #- Fit4Gb@residuals  is residuals after ARMA only 
  Randomness.tests(res4Gb)


  dX2.hat <- predict(Fit4Gb, 1)





  #--- Rolling Prediction of next day ---

  dX2.hat <- matrix(0, 500, 3)
  dX55.hat <- matrix(0, 500, 2)
  for (i in 1:500){
  
      print(i)

      #--- Cut dX into period 2
      dX2 <- window(dX, start=2000+i-1, end=3000+i-1)

      #--- Fit ARMA and GARCH at the same time
      Fit4G <-  garchFit(~ arma(0,2) + garch(1,1), data=dX2, cond.dist="norm",  include.mean = FALSE, trace = FALSE)
      Fit55 <-  Arima( dX2, order=c(0,0,2) )
      dX2.hat[i, ] <- unlist( predict(Fit4G, 1) )
      dX55.hat[i, ] <- unlist( predict(Fit55, 1) )

  }


  #--- Retro fit the same period ---
  dX3 <- window(dX, start=2000, end=3500)
  Fit5G <- garchFit(~ arma(0,2) + garch(1,1), data=dX3, cond.dist="norm",  include.mean = FALSE, trace = FALSE)
  res5G <- Fit5G@residuals/Fit5G@sigma.t



  #--- Retro fit vs Forward Prediction of Sig.t ---
  plot(Fit5G@sigma.t[1001:1500], type="l", col="blue")
  lines(dX2.hat[,3], col="red")
  legend(350,0.017, c("Back Estimated","Forward Predicted"), lty=c(1,1), lwd=c(2,2), col=c("blue","red")) 


  #--- Retro fit vs Forward Prediction of Sig.t ---
  plot(abs(dX3)[1001:1500], type="h", main="|dX3| and Sig.t")
  lines(Fit5G@sigma.t[1001:1500], col="blue")
  lines(dX2.hat[,3], col="red")
  legend(350,0.017, c("Back Estimated","Fwd Predicted"), lty=c(1,1), lwd=c(2,2), col=c("blue","red")) 


  #--- Prediction of Conditional Mean ---
  plot((dX3)[1001:1500], type="h", main="")
  lines(dX2.hat[,1], col="red")
  legend(350,0.017, c("Actual","Forward Predicted"), lty=c(1,1), lwd=c(2,2), col=c("black","red")) 


  A <- cbind( dX3[1001:1500]>0, dX2.hat[,1]>0, (dX3[1001:1500]>0)==(dX2.hat[,1]>0) )
  colMeans(A)  

  A <- cbind( dX3[1001:1500]>0, dX55.hat[,1]>0, (dX3[1001:1500]>0)==(dX55.hat[,1]>0) )
  colMeans(A)  

















#--- 9. Testing Conditional Distribution of ARMA-GARCH using K-S test ---------------------------------------------------------------



  #--- 9.1. GOF test with Kolmogolov-Smirnov (known null) -----------

  #-- limiting distribution under null is sup of |BB(F(t))|
  D1 <- D2 <- D3 <- 0
  for (itt in 1:1000){
    X1 <- rnorm(100,  0, 1)
    X2 <- rnorm(1000, 0, 1)
    X3 <- rnorm(5000, 0, 1)
    D1[itt] <- ks.test( X1, "pnorm", 0, 1)$statistic    
    D2[itt] <- ks.test( X2, "pnorm", 0, 1)$statistic    
    D3[itt] <- ks.test( X3, "pnorm", 0, 1)$statistic    
  }
  x <- seq(0,5,.1)
  E1 <- ecdf( sqrt(100 )*D1 ); sort(sqrt(100 )*D1)[950]  #1.323159
  E2 <- ecdf( sqrt(1000)*D2 ); sort(sqrt(1000)*D2)[950]  
  E3 <- ecdf( sqrt(5000)*D3 ); sort(sqrt(5000)*D3)[950]  
  plot( x, E1(x), type='l', main="CDF of KS test statistic")
  lines(x, E2(x), col='red')
  lines(x, E3(x), col='green')

  legend(3.8,0.8, c("n = 100","n = 1000", "n = 5000"), lwd=c(2,2,2), col=c("black", "red","green")) 




  #--- 9.2. Compare limiting distribution for Normal vs Exp for known null ------
  n=1000
  D1 <- D2 <- D3 <- D4 <- 0
  for (itt in 1:1000){
    X1 <- rnorm(1000,  2, 3)
    X2 <- rexp(1000,  .5)
    D1[itt] <- ks.test( X1, "pnorm", 2,        3     )$statistic    
    D3[itt] <- ks.test( X2, "pexp",  .5              )$statistic    
  }
  x <- seq(0,5,.1)
  E1 <- ecdf( sqrt(n)*D1 ); sort(sqrt(n)*D1)[950]  #1.323159
  E3 <- ecdf( sqrt(n)*D3 ); sort(sqrt(n)*D3)[950] 
  plot( x, E1(x), type='l', main="CDF of KS test statistic (n=1000)")
  lines(x, E3(x), col='green')
  legend(3.8,0.8, c("N(0,1)","Exp(2)"), lwd=c(2,2), col=c("black", "green")) 




  #--- 9.3. Compare limiting distribution for Normal vs Exp ------
  #         for location-scale null 

  n=1000
  D1 <- D2 <- D3 <- D4 <- 0
  for (itt in 1:1000){
    X1 <- rnorm(1000,  2, 3)
    X2 <- rexp(1000, .5)
    D2[itt] <- ks.test( X1, "pnorm", mean(X1), sd(X1))$statistic
    D4[itt] <- ks.test( X2, "pexp",  1/mean(X2)      )$statistic
  }
  x <- seq(0,5,.1)
  E2 <- ecdf( sqrt(n)*D2 ); sort(sqrt(n)*D2)[950]  
  E4 <- ecdf( sqrt(n)*D4 ); sort(sqrt(n)*D4)[950]  
  plot( x, E1(x), type='l')
  lines(x, E2(x), col='red')
  lines(x, E4(x), col='blue')    
  legend(3.8,0.8, c("N(0,1)","N(mu,sig)","Exp(th)"), lwd=c(2,2,2), col=c("black", "red","green")) 







  #--- 9.4. Comparing limting distribution of KS test under ARMA-GARCH -------------------------

  library(fGarch)
  source("http://gozips.uakron.edu/~nmimoto/689/TS_R-90.txt") #- load Randomness.tests
  

  D <- read.csv("http://gozips.uakron.edu/~nmimoto/pages/datasets/SPY.csv", header=T)
  dX <- diff(log(X))
  #--- Cut dX into period 2
  dX2 <- window(dX, start=2000, end=3000)


  #--- Fit ARMA and GARCH at the same time
  Fit3G <-  garchFit(~ arma(0,2) + garch(1,1), data=dX2, cond.dist="std",  include.mean = FALSE, trace = FALSE)
  Fit3G
  res3G <- Fit3G@residuals / Fit3G@sigma.t   #- residuals after ARMA-GARCH

  Fit4G <-  garchFit(~ arma(0,2) + garch(1,1), data=dX2, cond.dist="sstd",  include.mean = FALSE, trace = FALSE)
  Fit4G
  res4G <- Fit4G@residuals / Fit4G@sigma.t   #- residuals after ARMA-GARCH
                                                #- Fit4Gb@residuals  is residuals after ARMA only 
  Randomness.tests(res4G)


  ks.test(res4G, "psstd", 0, 1, 7.216, .889)    #- can't use p-values directly

  ks.test(res4G, "psstd", 0, 1, 7.216, .889)$statistic * sqrt(1000)



  n = 1000
  theta <- c(.024, .1, .8)
  
  D1 <- D2 <- D3 <- D4 <- 0
  for (itt in 1:1000){
  
    X1 <- rnorm(1000,  2, 3)
    X2 <- rexp(1000, .5)
    D2[itt] <- ks.test( X1, "pnorm", mean(X1), sd(X1))$statistic
    D4[itt] <- ks.test( X2, "pexp",  1/mean(X2)      )$statistic
    
  }
  x <- seq(0,5,.1)
  E2 <- ecdf( sqrt(n)*D2 ); sort(sqrt(n)*D2)[950]  
  E4 <- ecdf( sqrt(n)*D4 ); sort(sqrt(n)*D4)[950]  
  plot( x, E1(x), type='l')
  lines(x, E2(x), col='red')
  lines(x, E4(x), col='blue')    
  legend(3.8,0.8, c("N(0,1)","N(mu,sig)","Exp(th)"), lwd=c(2,2,2), col=c("black", "red","green")) 

  
  itt=1000
  ks <- matrix(0, itt, 1)
  for (i in 1:itt) {

    print(i)
    
    spec <- garchSpec(model = list(ma = c(0.108, -0.119), omega=.5, alpha=.1, beta=.8, nu=7.22, xi=.889 ),  cond.dist="sstd")
    x    <- garchSim(spec, n = n, extended=FALSE)
  
    Fit1  <- garchFit(~ arma(0,2) + garch(1,1), data=x, cond.dist="sstd",  include.mean = FALSE, trace = FALSE)
    res1  <- Fit1@residuals / Fit1@sigma.t   #- residuals after ARMA-GARCH
    

    ks[i] <- ks.test(res1, "psstd", 0,1,Fit1@fit$coef[7],Fit1@fit$coef[6])$statistic

  }
  
  
  x <- seq(0,2,.1)
  E1 <- ecdf( sqrt(n)*ks ); sort(sqrt(n)*D1)[950]  #- 1.16
  E3 <- ecdf( sqrt(n)*D3 ); sort(sqrt(n)*D3)[950]  #- 1.34
  plot( x, E1(x), type='l', main="CDF of KS test statistic (n=1000)", lwd=2)
  lines(x, E3(x), col='green', lwd=2)
  legend(1.5,0.8, c("Arma-Garch", "N(0,1)"), lwd=c(2,2), col=c("black", "green")) 

  E1(1.208) #- 0.969





  #--- 10. ARMA-GARCH with xreg -------------------------

  library(fGarch)
  library(ruGarch)
  source("http://gozips.uakron.edu/~nmimoto/689/TS_R-90.txt") #- load Randomness.tests


  #- Simulate ARMA-GARCH around 3+.5b -   
  spec <- garchSpec(model = list(ma = c(0.5), omega=.5, alpha=.1, beta=.8),  cond.dist="norm")
  x    <- garchSim(spec, n=1000 , extended=FALSE)

  b    <- rnorm(1000);   dim(b) <- c(1000,1)
  b2   <- rnorm(10);     dim(b2) <- c(10, 1)     #- future regressor

  Y = 3+.5*b + x



  #- Regress Y on b, then firt ARMA-GARCH - 
  spec1 <- ugarchspec(  variance.model = list(model = "sGARCH", garchOrder = c(1, 1), submodel="GARCH"), 
                            mean.model = list(armaOrder = c(0, 1), include.mean = TRUE, external.regressors = b),             
                         distribution.model = "norm")

  Fit1 <- ugarchfit(spec=spec1, data=Y)

  Fit1@fit$coef   #- Coefficients


  layout(matrix(1:3, 3, 1))
  plot( Fit1@fit$residuals )   #- Residuals from ARMA part only
  plot( Fit1@fit$sigma     )   #- Sigma_t for garch part
  plot( Fit1@fit$z         )   #- standardized residuals (Test this with Randomness.tests())


  #  cbind(Fit1@fit$residuals/Fit1@fit$sigma, Fit1@fit$z )  #- they are the same 


  Randomness.tests(Fit1@fit$z)


  ugarchforecast(Fit1,  n.ahead = 10, external.forecasts = list(mregfor = b2) )
  






