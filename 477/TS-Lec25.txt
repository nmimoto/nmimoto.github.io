###
###
###  Forecasting AR(p) - R code only
###
###
####################################


# 4. Example: 10-step AR(2) prediction

  set.seed(77224)                                    # set seed
  X <- arima.sim(list(ar = c(.6, .3) ), 200 )        # Simulate AR(2)

  library(forecast)                                  # install.packages("forecast")

  Fit1 <- Arima(X, order=c(2,0,0), include.mean=FALSE)   # Force to fit AR(2) w/o mean
  Fit1       

  X.forec  <- predict(Fit1, n.ahead=10)      # 10-step prediction of AR(2)
  str(X.forec)                               # See what's inside the forecast  

  plot(forecast(Fit1, 50))                   # plot forecast with prediction errors
  abline(h=0)

  library(ltsa)                              # load the package ltsa
  Th.ACVF  <- tacvfARMA(phi = c(.5191, .4065), theta= c(0), maxLag=10, sigma2=1)
                                             # get Theoretical ACVF
  Th.ACVF
  1.96*sqrt(Th.ACVF)



 
  #--- When true mean is not 0 ---
  Y    <- arima.sim(list(ar = c(.6, .3) ), 200 ) + 8

  Fit2 <- Arima(X, order=c(2,0,0) )   # Force to fit AR(2) with mean
  Fit2       

  plot(forecast(Fit2))
  abline(h=mean(Y))



# 4.  Rolling 1-step prediction (Fixed Window Size)

## Example: Rolling 1-step prediction

  set.seed(77224)                                             # set seed
  X  <- arima.sim(list(ar = c(.6, .3)),  n=180, sd=1  )       # simulate the dataset

  plot(X, type="o", col="red")          # Entire dataset.
  
  X1    <- X[1:100]                     # X is the first 100 obs.
  lines(X1, type="o")                       # Pretend that black is all you have. 
  
  Fit3 <- auto.arima(X1, d=0, max.q=0)      # Find best AR(p) by AIC 
  Fit3

  #--- Suppose you are happy with AR(2).  Perform rolling 1-step prediction with widnow of 100 obs.
  #--- The model AR(2) is fixed as rolled, but parameters are re-estimated each time. 


  #--- Rolling 1-step Prediction w/ fixed window of 100
  library(forecast)
  Y <- X                   # Entire data
  window.size <- 100       # Window size for estimation
  order.in <- c(2,0,0)     # model order


    Yhat  <- Yhat.CIu <- Yhat.CIl <- 0        # initialize what needs to be saved
    for (i in 1:(length(Y)-window.size)) {
      # Force to fit AR(2) each time on last 100 obs.
      Fit00 <- Arima( Y[i:(i+window.size-1)], order=order.in)     # <--- AR(2)
  
      Y.h  <- predict(Fit00, n.ahead=1)       # one step prediction
      Yhat[i]     <- Y.h$pred
      Yhat.CIu[i] <- Yhat[i]+1.96*Y.h$se
      Yhat.CIl[i] <- Yhat[i]-1.96*Y.h$se
    }
  # Yhat starts at window.size+1 up to length(Y)
  Yhat     = ts(Yhat, start=time(Y)[window.size+1], freq=1)
  Yhat.CIu = ts(Yhat, start=time(Y)[window.size+1], freq=1)
  Yhat.CIl = ts(Yhat, start=time(Y)[window.size+1], freq=1)
  Y1 = window(Y, start=time(Y)[1], end=time(Y)[window.size])

  #- Calculate prediction performance
  Pred.error = Y[(window.size+1):length(Y)] - Yhat
  Pred.rMSE =  sqrt(  mean( (Pred.error)^2 ) )     # prediction root Mean Squared Error
  c( mean(Pred.error), Pred.rMSE )                 # Av Pred Error, and pred rMSE
  

  #- Plot the prediction result with original data 
  plot(Y, type="o", col="red",
    main="Rolling 1-step prediction (Red=Actual, Blue=Prediction)" )  
  lines( Y1,       type="o")
  lines( Yhat,     type="o", col="blue")
  lines( Yhat.CIu, type="l", col="gray30", lty=2)
  lines( Yhat.CIl, type="l", col="gray30", lty=2)




  # - Plot the prediction error
  layout(matrix(1:2, 1, 2))    # two plots side by side
  plot( (window.size+1):length(Y), Pred.error, type="o", main="Prediction Error (Red-Blue)" ) 
  abline(h=c(-1.96, 1.96), col="blue", lty=2)
  acf(Pred.error)
  layout(1)                    # reset the layout

 



 

















